{
    "sourceFile": "pages/free/index.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1723210330622,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1723210330622,
            "name": "Commit-0",
            "content": "import React, { useEffect, useState } from 'react';\r\nimport styles from './index.module.scss';\r\n// import Navbar from '../../Components/Navbar';\r\n// import Dashboard from '../../Components/Dashboardleft';\r\n\r\ninterface User {\r\n  _id: string;\r\n  name: string;\r\n  email: string;\r\n  password: string;\r\n  createdAt: string;\r\n  updatedAt: string;\r\n  __v: number;\r\n  leftChild?: string;\r\n  rightChild?: string;\r\n}\r\n\r\ninterface TreeNodeProps {\r\n  user: User;\r\n  left: TreeNodeProps | null;\r\n  right: TreeNodeProps | null;\r\n}\r\n\r\nconst createBinaryTree = (users: User[]): Map<string, TreeNodeProps> => {\r\n  const userMap = new Map<string, TreeNodeProps>();\r\n\r\n  users.forEach(user => {\r\n    userMap.set(user._id, { user, left: null, right: null });\r\n  });\r\n\r\n  users.forEach(user => {\r\n    const node = userMap.get(user._id);\r\n    if (user.leftChild && userMap.has(user.leftChild)) {\r\n      node!.left = userMap.get(user.leftChild)!;\r\n    }\r\n    if (user.rightChild && userMap.has(user.rightChild)) {\r\n      node!.right = userMap.get(user.rightChild)!;\r\n    }\r\n  });\r\n\r\n  return userMap;\r\n};\r\n\r\nconst TreeNode = ({ node, onClick }: { node: TreeNodeProps | null, onClick: (node: TreeNodeProps) => void }) => {\r\n  if (!node) return null;\r\n\r\n  return (\r\n    <div className={styles.node} onClick={() => onClick(node)}>\r\n      <div className={styles.icon}>\r\n        <i className=\"fas fa-user\"></i>\r\n      </div>\r\n      <div className={styles.name}>{node.user.name}</div>\r\n      <div className={styles.email}>{node.user.email}</div>\r\n      <div className={styles.id}>ID: {node.user._id}</div>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst Index = () => {\r\n  const [users, setUsers] = useState<User[]>([]);\r\n  const [userMap, setUserMap] = useState<Map<string, TreeNodeProps> | null>(null);\r\n  const [currentNode, setCurrentNode] = useState<TreeNodeProps | null>(null);\r\n  const [viewAll, setViewAll] = useState(false);\r\n\r\n  useEffect(() => {\r\n    const fetchUsers = async () => {\r\n      const response = await fetch('http://localhost:3000/auth/all');\r\n      const data: User[] = await response.json();\r\n      setUsers(data);\r\n      const map = createBinaryTree(data);\r\n      setUserMap(map);\r\n\r\n      if (data.length > 0) {\r\n        setCurrentNode(map.get(data[0]._id) || null);\r\n      }\r\n    };\r\n\r\n    fetchUsers();\r\n  }, []);\r\n\r\n  const handleNodeClick = (node: TreeNodeProps) => {\r\n    setCurrentNode(node);\r\n  };\r\n\r\n  const renderInitialNodes = (node: TreeNodeProps | null) => {\r\n    if (!node) return null;\r\n\r\n    const children: TreeNodeProps[] = [];\r\n    if (node.left) children.push(node.left);\r\n    if (node.right) children.push(node.right);\r\n\r\n    return (\r\n      <div className={styles.children}>\r\n        {children.map((child, index) => (\r\n          <div key={child.user._id} className={styles.child}>\r\n            <div className={index === 0 ? styles.lineleft : styles.lineright}></div>\r\n            <TreeNode node={child} onClick={handleNodeClick} />\r\n          </div>\r\n        ))}\r\n      </div>\r\n    );\r\n  };\r\n\r\n  const renderCompleteTree = (node: TreeNodeProps | null): JSX.Element | null => {\r\n    if (!node) return null;\r\n\r\n    return (\r\n      <div>\r\n        <TreeNode node={node} onClick={handleNodeClick} />\r\n        <div className={styles.children}>\r\n          {node.left && (\r\n            <div className={styles.child}>\r\n              <div className={styles.lineleft}></div>\r\n              {renderCompleteTree(node.left)}\r\n            </div>\r\n          )}\r\n          {node.right && (\r\n            <div className={styles.child}>\r\n              <div className={styles.lineright}></div>\r\n              {renderCompleteTree(node.right)}\r\n            </div>\r\n          )}\r\n        </div>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {/* <Navbar /> */}\r\n      <div style={{ display: 'flex', height: 'auto' }}>\r\n        {/* <Dashboard /> */}\r\n        <div className={styles.container}>\r\n          <div className={styles.tree}>\r\n            <div className={styles.admin}>\r\n              <div className={styles.icon}>\r\n                <i className=\"fas fa-user-shield\"></i>\r\n              </div>\r\n              <div className={styles.name}>Admin</div>\r\n            </div>\r\n            {currentNode && (\r\n              <div>\r\n                {viewAll ? (\r\n                  renderCompleteTree(currentNode)\r\n                ) : (\r\n                  <>\r\n                    <TreeNode node={currentNode} onClick={handleNodeClick} />\r\n                    {renderInitialNodes(currentNode)}\r\n                  </>\r\n                )}\r\n                <button className={styles.viewAllButton} onClick={() => setViewAll(!viewAll)}>\r\n                  {viewAll ? 'Show Less' : 'View All'}\r\n                </button>\r\n              </div>\r\n            )}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Index;\r\n"
        }
    ]
}