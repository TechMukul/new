{
    "sourceFile": "pages/Skintypes/[Skintypes]/index.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1723106977172,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1723106977172,
            "name": "Commit-0",
            "content": "import React, { useEffect, useState } from \"react\";\r\nimport axios from \"axios\";\r\nimport styles from \"./Index.module.scss\";\r\nimport Navbar from \"../../../Components/Navbar\";\r\nimport Dashboard from \"../../../Components/Dashboardleft\";\r\nimport { useRouter } from \"next/router\";\r\nimport Modal from \"../../../Components/Modal\"; // Import the Modal component\r\nimport Sell from \"../../../Components/Sell\";\r\n\r\nconst Index = () => {\r\n  const [castlesData, setCastlesData] = useState<any>([]);\r\n  const [showModal, setShowModal] = useState<any>(false);\r\n  const [showSell, setShowSell] = useState<any>(false);\r\n  const [currentCastle, setCurrentCastle] = useState<any>(null);\r\n  const router = useRouter();\r\n  const { Skintypes } = router.query;\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      try {\r\n        const response = await axios.get(\r\n          `http://localhost:3000/data/permalink/${Skintypes}`\r\n        );\r\n        console.log(response);\r\n        setCastlesData(response.data);\r\n      } catch (error) {\r\n        console.error(\"Error fetching data:\", error);\r\n      }\r\n    };\r\n\r\n    if (Skintypes) {\r\n      fetchData();\r\n    }\r\n  }, [Skintypes]);\r\n\r\n  const handleEdit = (castle: any) => {\r\n    setCurrentCastle(castle); \r\n    setShowModal(true);\r\n  };\r\n  \r\n  const handleSell = (castle: any) => {\r\n    setCurrentCastle(castle);\r\n    setShowSell(true);\r\n  };\r\n\r\n  const handleInputChange = (field: any, value: any) => {\r\n    setCurrentCastle((prev: any) => ({\r\n      ...prev,\r\n      [field]: value,\r\n    }));\r\n  };\r\n\r\n  const handleSave = async () => {\r\n    try {\r\n      const token = localStorage.getItem(\"accessToken\");\r\n      const response = await axios.put(\r\n        `http://localhost:3000/data/castles/${currentCastle._id}`,\r\n        {\r\n          ...currentCastle,\r\n          quantity: Number(currentCastle.quantity), // Ensure quantity is a number\r\n        },\r\n        {\r\n          headers: {\r\n            Authorization: `Bearer ${token}`,\r\n          },\r\n        }\r\n      );\r\n      console.log(response);\r\n      setCastlesData((prev: any) =>\r\n        prev.map((castle: any) =>\r\n          castle._id === currentCastle._id ? currentCastle : castle\r\n        )\r\n      );\r\n      setShowModal(false);\r\n    } catch (error) {\r\n      console.error(\"Error updating data:\", error);\r\n    }\r\n  };\r\n\r\n  const handleSellSave = async () => {\r\n    try {\r\n      const token = localStorage.getItem(\"accessToken\");\r\n      \r\n      // Send customer details\r\n      await axios.post(\r\n        \"http://localhost:3000/customer/details\",\r\n        {\r\n          name: currentCastle.customerName,\r\n          skintype: currentCastle.skintype,\r\n          quantity: Number(currentCastle.quantitySold), // Ensure quantitySold is a number\r\n        },\r\n        {\r\n          headers: {\r\n            Authorization: `Bearer ${token}`,\r\n          },\r\n        }\r\n      );\r\n      \r\n      // Update the quantity in castles data\r\n      const updatedCastle = {\r\n        ...currentCastle,\r\n        quantity: Number(currentCastle.quantity) - Number(currentCastle.quantitySold), // Ensure both quantities are numbers\r\n      };\r\n\r\n      await axios.put(\r\n        `http://localhost:3000/data/castles/${currentCastle._id}`,\r\n        updatedCastle,\r\n        {\r\n          headers: {\r\n            Authorization: `Bearer ${token}`,\r\n          },\r\n        }\r\n      );\r\n\r\n      setCastlesData((prev: any) =>\r\n        prev.map((castle: any) =>\r\n          castle._id === currentCastle._id ? updatedCastle : castle\r\n        )\r\n      );\r\n      setShowSell(false);\r\n    } catch (error) {\r\n      console.error(\"Error updating data:\", error);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {/* <Navbar /> */}\r\n      <div style={{ display: \"flex\" }}>\r\n        {/* <Dashboard /> */}\r\n        <div className={styles.cardContainer}>\r\n          {castlesData.map((castle: any) => (\r\n            <div key={castle._id} className={styles.card}>\r\n              <img\r\n                src={castle.photo[0]}\r\n                alt={castle.skintype}\r\n                className={styles.cardImage}\r\n              />\r\n              <div className={styles.cardContent}>\r\n                <h2 className={styles.cardTitle}>{castle.skintype}</h2>\r\n                <p className={styles.cardText}>\r\n                  <strong>Quantity:</strong> {castle.quantity}\r\n                </p>\r\n                <p className={styles.cardText}>\r\n                  <strong>Castles:</strong> {castle.castles.join(\", \")}\r\n                </p>\r\n                <p className={styles.cardText}>\r\n                  <strong>Buff:</strong> {castle.buff.join(\", \")}\r\n                </p>\r\n                <button onClick={() => handleEdit(castle)}>Edit</button>\r\n                <button onClick={() => handleSell(castle)}>Sell</button>\r\n              </div>\r\n            </div>\r\n          ))}\r\n        </div>\r\n      </div>\r\n      <Modal\r\n        show={showModal}\r\n        onClose={() => setShowModal(false)}\r\n        castle={currentCastle}\r\n        handleInputChange={handleInputChange}\r\n        handleSave={handleSave}\r\n      />\r\n      <Sell\r\n        show={showSell}\r\n        onClose={() => setShowSell(false)}\r\n        castle={currentCastle}\r\n        handleInputChange={handleInputChange}\r\n        handleSave={handleSellSave}\r\n      />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Index;\r\n"
        }
    ]
}