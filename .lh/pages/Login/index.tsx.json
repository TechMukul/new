{
    "sourceFile": "pages/Login/index.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 9,
            "patches": [
                {
                    "date": 1723184239140,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1723184683336,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -116,9 +116,9 @@\n     console.log(\"click here\");\r\n   };\r\n \r\n   return (\r\n-    <> <Navbar />\r\n+    <> \r\n     <div className={styles.loginContainer}>\r\n      \r\n       {loading && (\r\n         <div className={styles.loadingOverlay}>\r\n"
                },
                {
                    "date": 1723196471168,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,18 +1,15 @@\n import React, { useState, useEffect } from \"react\";\r\n import axios from \"axios\";\r\n import styles from \"./index.module.scss\";\r\n import { useRouter } from \"next/router\";\r\n-import Navbar from '@/Components/Navbar'\r\n+import Navbar from \"@/Components/Navbar\";\r\n \r\n const Index = () => {\r\n   const [email, setEmail] = useState<string>(\"\");\r\n   const [password, setPassword] = useState<string>(\"\");\r\n   const [error, setError] = useState<string | null>(null);\r\n   const [loading, setLoading] = useState<boolean>(false);\r\n-  const [isPasswordModalOpen, setIsPasswordModalOpen] = useState<boolean>(false);\r\n-  const [newPassword, setNewPassword] = useState<string>(\"\");\r\n-  const [confirmPassword, setConfirmPassword] = useState<string>(\"\");\r\n   const router = useRouter();\r\n \r\n   useEffect(() => {\r\n     const token = localStorage.getItem(\"accessToken\");\r\n@@ -33,9 +30,8 @@\n \r\n   const handleLogin = async (event: React.FormEvent) => {\r\n     event.preventDefault();\r\n     setLoading(true);\r\n-    localStorage.setItem(\"id\", email);\r\n     try {\r\n       const loginResponse = await axios.post(\r\n         \"https://www.referback.trollsufficient.com/admin/login\",\r\n         { email, password }\r\n@@ -43,9 +39,9 @@\n       const { token, role } = loginResponse.data;\r\n       localStorage.setItem(\"accessToken\", token);\r\n       localStorage.setItem(\"role\", role);\r\n \r\n-       const userResponse = await axios.post(\r\n+      const userResponse = await axios.post(\r\n         \"https://www.referback.trollsufficient.com/admin/user\",\r\n         { email },\r\n         {\r\n           headers: {\r\n@@ -57,9 +53,9 @@\n \r\n       const userName = userResponse.data.name;\r\n       const userId = userResponse.data.id;\r\n       localStorage.setItem(\"userName\", userName);\r\n-      localStorage.setItem(\"userId\", userId); // Save userId for later use\r\n+      localStorage.setItem(\"userId\", userId);\r\n \r\n       const coinsResponse = await axios.get(\r\n         `https://www.referback.trollsufficient.com/admin/coins/${userId}`,\r\n         {\r\n@@ -70,9 +66,9 @@\n         }\r\n       );\r\n \r\n       const userCoins = coinsResponse.data.coins;\r\n-      localStorage.setItem(\"userCoins\", userCoins);\r\n+      localStorage.setItem(\"userCoins\", userCoins.toString());\r\n       router.push(\"/home\");\r\n     } catch (error) {\r\n       console.error(\"Login error:\", error);\r\n       setError(\"Invalid credentials\");\r\n@@ -80,135 +76,61 @@\n       setLoading(false);\r\n     }\r\n   };\r\n \r\n-  const handleChangePassword = async () => {\r\n-    if (newPassword !== confirmPassword) {\r\n-      alert(\"Passwords do not match.\");\r\n-      return;\r\n-    }\r\n-\r\n-    try {\r\n-      const token = localStorage.getItem(\"accessToken\");\r\n-      const userId = localStorage.getItem(\"id\");\r\n-      if (token && userId) {\r\n-        await axios.put(\r\n-          `https://www.referback.trollsufficient.com/admin/set-password/${userId}`,\r\n-          { password: newPassword }\r\n-        );\r\n-\r\n-        alert(\"Password changed successfully.\");\r\n-        setNewPassword(\"\");\r\n-        setConfirmPassword(\"\");\r\n-        handleCloseModal();\r\n-      }\r\n-    } catch (error) {\r\n-      console.error(\"Error changing password:\", error);\r\n-      alert(\"There was an error changing the password. Please try again.\");\r\n-    }\r\n-  };\r\n-\r\n-  const handleCloseModal = () => {\r\n-    setIsPasswordModalOpen(false);\r\n-  };\r\n-\r\n-  const handleOpenModal = () => {\r\n-    // setIsPasswordModalOpen(true);\r\n-    console.log(\"click here\");\r\n-  };\r\n-\r\n   return (\r\n-    <> \r\n-    <div className={styles.loginContainer}>\r\n-     \r\n-      {loading && (\r\n-        <div className={styles.loadingOverlay}>\r\n-          <div className={styles.spinner}></div>\r\n-        </div>\r\n-      )}\r\n-      <button \r\n-        className={styles.backButton} \r\n-        onClick={() => router.back()} \r\n-        aria-label=\"Go Back\"\r\n-      >\r\n-      </button>\r\n-      <div className={styles.loginForm}>\r\n-        <h1 className={styles.header}>Login First to View User Details and Message Us</h1>\r\n-        <h2 className={styles.loginTitle}>LOGIN</h2>\r\n-        <form onSubmit={handleLogin}>\r\n-          <div className={styles.inputContainer}>\r\n-            <input\r\n-              type=\"text\"\r\n-              value={email}\r\n-              onChange={(e) => setEmail(e.target.value)}\r\n-              required\r\n-              autoComplete=\"current-username\"\r\n-            />\r\n-            <label>User Id</label>\r\n-            <div className={styles.inputUnderline}></div>\r\n+    <>\r\n+      <div className={styles.loginContainer}>\r\n+        {loading && (\r\n+          <div className={styles.loadingOverlay}>\r\n+            <div className={styles.spinner}></div>\r\n           </div>\r\n-          <div className={styles.inputContainer}>\r\n-            <input\r\n-              type=\"password\"\r\n-              value={password}\r\n-              onChange={(e) => setPassword(e.target.value)}\r\n-              required\r\n-              autoComplete=\"current-password\"\r\n-            />\r\n-            <label>Password</label>\r\n-            <div className={styles.inputUnderline}></div>\r\n-          </div>\r\n-          {error && <p className={styles.error}>{error}</p>}\r\n-          <div className={styles.button_login}> \r\n-            <button\r\n-              type=\"submit\"\r\n-              className={styles.loginButton}\r\n-              disabled={loading}\r\n-            >\r\n-              {loading ? \"Loading...\" : \"Login\"}\r\n-            </button>\r\n-          </div>\r\n-        </form>\r\n-        {/* <button\r\n-          className={styles.forgotPasswordButton}\r\n-          onClick={handleOpenModal}\r\n+        )}\r\n+        <button\r\n+          className={styles.backButton}\r\n+          onClick={() => router.back()}\r\n+          aria-label=\"Go Back\"\r\n         >\r\n-          Forgot Password\r\n-        </button> */}\r\n-      </div>\r\n-\r\n-      {/* {isPasswordModalOpen && (\r\n-        <div className={styles.modalBackdrop} onClick={handleCloseModal}>\r\n-          <div\r\n-            className={styles.modalContent}\r\n-            onClick={(e) => e.stopPropagation()}\r\n-          >\r\n-            <h3>Change Password</h3>\r\n-            <div className={styles.modalColumn}>\r\n-              <label>New Password:</label>\r\n+        </button>\r\n+        <div className={styles.loginForm}>\r\n+          <h1 className={styles.header}>Login First to View User Details and Message Us</h1>\r\n+          <h2 className={styles.loginTitle}>LOGIN</h2>\r\n+          <form onSubmit={handleLogin}>\r\n+            <div className={styles.inputContainer}>\r\n               <input\r\n-                type=\"password\"\r\n-                value={newPassword}\r\n-                onChange={(e) => setNewPassword(e.target.value)}\r\n-                placeholder=\"Enter new password\"\r\n+                type=\"text\"\r\n+                value={email}\r\n+                onChange={(e) => setEmail(e.target.value)}\r\n+                required\r\n+                autoComplete=\"current-username\"\r\n               />\r\n+              <label>User Id</label>\r\n+              <div className={styles.inputUnderline}></div>\r\n             </div>\r\n-            <div className={styles.modalColumn}>\r\n-              <label>Confirm Password:</label>\r\n+            <div className={styles.inputContainer}>\r\n               <input\r\n                 type=\"password\"\r\n-                value={confirmPassword}\r\n-                onChange={(e) => setConfirmPassword(e.target.value)}\r\n-                placeholder=\"Confirm new password\"\r\n+                value={password}\r\n+                onChange={(e) => setPassword(e.target.value)}\r\n+                required\r\n+                autoComplete=\"current-password\"\r\n               />\r\n+              <label>Password</label>\r\n+              <div className={styles.inputUnderline}></div>\r\n             </div>\r\n-            <button onClick={handleChangePassword}>\r\n-              Set Password\r\n-            </button>\r\n-          </div>\r\n+            {error && <p className={styles.error}>{error}</p>}\r\n+            <div className={styles.button_login}>\r\n+              <button\r\n+                type=\"submit\"\r\n+                className={styles.loginButton}\r\n+                disabled={loading}\r\n+              >\r\n+                {loading ? \"Loading...\" : \"Login\"}\r\n+              </button>\r\n+            </div>\r\n+          </form>\r\n         </div>\r\n-      )} */}\r\n-    </div>\r\n+      </div>\r\n     </>\r\n   );\r\n };\r\n \r\n"
                },
                {
                    "date": 1723208164496,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,123 @@\n+import React, { useEffect, useState } from \"react\";\r\n+import style from \"./index.module.scss\";\r\n+import Link from \"next/link\";\r\n+import axios from \"axios\";\r\n+import { useRouter } from \"next/router\";\r\n+\r\n+const Navbar = () => {\r\n+  const [isMenuOpen, setIsMenuOpen] = useState(false);\r\n+  const [coins, setCoins] = useState<number>(0);\r\n+  const [isAuthenticated, setIsAuthenticated] = useState<boolean>(false);\r\n+  const [userRole, setUserRole] = useState<string | null>(null);\r\n+  const router = useRouter();\r\n+\r\n+  const toggleMenu = () => {\r\n+    setIsMenuOpen((prevState) => !prevState);\r\n+  };\r\n+\r\n+  useEffect(() => {\r\n+    document.body.style.overflow = isMenuOpen ? \"hidden\" : \"auto\";\r\n+\r\n+    const token = localStorage.getItem(\"accessToken\");\r\n+    const role = localStorage.getItem(\"role\");\r\n+\r\n+    setIsAuthenticated(!!token);\r\n+    setUserRole(role);\r\n+\r\n+    const fetchCoins = async () => {\r\n+      if (token) {\r\n+        try {\r\n+          const userId = localStorage.getItem(\"userId\");\r\n+          if (userId) {\r\n+            const response = await axios.get(\r\n+              `https://www.referback.trollsufficient.com/admin/coins/${userId}`,\r\n+              {\r\n+                headers: {\r\n+                  Authorization: `Bearer ${token}`,\r\n+                  \"Content-Type\": \"application/json\",\r\n+                },\r\n+              }\r\n+            );\r\n+            setCoins(response.data.coins);\r\n+          }\r\n+        } catch (error) {\r\n+          console.error(\"Error fetching coins:\", error);\r\n+        }\r\n+      }\r\n+    };\r\n+\r\n+    fetchCoins();\r\n+  }, [isMenuOpen, isAuthenticated]);\r\n+\r\n+  const handleLogout = () => {\r\n+    localStorage.removeItem(\"accessToken\");\r\n+    localStorage.removeItem(\"userName\");\r\n+    localStorage.removeItem(\"userId\");\r\n+    localStorage.removeItem(\"userCoins\");\r\n+    localStorage.removeItem(\"role\");\r\n+    setCoins(0);\r\n+    setIsAuthenticated(false);\r\n+    setUserRole(null);\r\n+    router.push(\"/\");\r\n+  };\r\n+\r\n+  return (\r\n+    <>\r\n+      <div className={style.hamburger} onClick={toggleMenu}>\r\n+        ☰\r\n+      </div>\r\n+      <div className={style.image}></div>\r\n+      <div className={style.search_box}>\r\n+        <input className={style.input} placeholder=\"Enter Favorite Skins\" />\r\n+      </div>\r\n+      <ul className={`${style.caintainer} ${isMenuOpen ? style.showMenu : \"\"}`}>\r\n+        <li className={style.items}>\r\n+          <div className={style.name}>\r\n+            <Link href=\"/\" style={{ textDecoration: \"none\", color: \"white\" }}>\r\n+              <p>Home</p>\r\n+            </Link>\r\n+            <hr className={style.line} />\r\n+          </div>\r\n+        </li>\r\n+        <li className={style.items}>\r\n+          <div className={style.name}>\r\n+            <Link href=\"/Tree\" style={{ textDecoration: \"none\", color: \"white\" }}>\r\n+              <p>Alluser</p>\r\n+            </Link>\r\n+            <hr className={style.line} />\r\n+          </div>\r\n+        </li>\r\n+        <li className={style.items}>\r\n+          <div className={style.name}>\r\n+            <p>Skins</p>\r\n+            <hr className={style.line} />\r\n+          </div>\r\n+        </li>\r\n+        <li className={style.items}>\r\n+          <div className={style.name}>\r\n+            <Link href=\"/contact\" style={{ textDecoration: \"none\", color: \"white\" }}>\r\n+              <p>Contact</p>\r\n+            </Link>\r\n+            <hr className={style.line} />\r\n+          </div>\r\n+        </li>\r\n+        <li className={style.items}>\r\n+          <div className={style.name}>\r\n+            {!isAuthenticated ? (\r\n+              <Link href=\"/Login\" style={{ textDecoration: \"none\", color: \"white\" }}>\r\n+                <p>Login</p>\r\n+              </Link>\r\n+            ) : (\r\n+              <button className={style.links} onClick={handleLogout}>\r\n+                Logout\r\n+              </button>\r\n+            )}\r\n+            <hr className={style.line} />\r\n+          </div>\r\n+        </li>\r\n+      </ul>\r\n+    </>\r\n+  );\r\n+};\r\n+\r\n+export default Navbar;\r\n"
                },
                {
                    "date": 1723208199546,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,127 +1,4 @@\n-import React, { useEffect, useState } from \"react\";\r\n-import style from \"./index.module.scss\";\r\n-import Link from \"next/link\";\r\n-import axios from \"axios\";\r\n-import { useRouter } from \"next/router\";\r\n-\r\n-const Navbar = () => {\r\n-  const [isMenuOpen, setIsMenuOpen] = useState(false);\r\n-  const [coins, setCoins] = useState<number>(0);\r\n-  const [isAuthenticated, setIsAuthenticated] = useState<boolean>(false);\r\n-  const [userRole, setUserRole] = useState<string | null>(null);\r\n-  const router = useRouter();\r\n-\r\n-  const toggleMenu = () => {\r\n-    setIsMenuOpen((prevState) => !prevState);\r\n-  };\r\n-\r\n-  useEffect(() => {\r\n-    document.body.style.overflow = isMenuOpen ? \"hidden\" : \"auto\";\r\n-\r\n-    const token = localStorage.getItem(\"accessToken\");\r\n-    const role = localStorage.getItem(\"role\");\r\n-\r\n-    setIsAuthenticated(!!token);\r\n-    setUserRole(role);\r\n-\r\n-    const fetchCoins = async () => {\r\n-      if (token) {\r\n-        try {\r\n-          const userId = localStorage.getItem(\"userId\");\r\n-          if (userId) {\r\n-            const response = await axios.get(\r\n-              `https://www.referback.trollsufficient.com/admin/coins/${userId}`,\r\n-              {\r\n-                headers: {\r\n-                  Authorization: `Bearer ${token}`,\r\n-                  \"Content-Type\": \"application/json\",\r\n-                },\r\n-              }\r\n-            );\r\n-            setCoins(response.data.coins);\r\n-          }\r\n-        } catch (error) {\r\n-          console.error(\"Error fetching coins:\", error);\r\n-        }\r\n-      }\r\n-    };\r\n-\r\n-    fetchCoins();\r\n-  }, [isMenuOpen, isAuthenticated]);\r\n-\r\n-  const handleLogout = () => {\r\n-    localStorage.removeItem(\"accessToken\");\r\n-    localStorage.removeItem(\"userName\");\r\n-    localStorage.removeItem(\"userId\");\r\n-    localStorage.removeItem(\"userCoins\");\r\n-    localStorage.removeItem(\"role\");\r\n-    setCoins(0);\r\n-    setIsAuthenticated(false);\r\n-    setUserRole(null);\r\n-    router.push(\"/\");\r\n-  };\r\n-\r\n-  return (\r\n-    <>\r\n-      <div className={style.hamburger} onClick={toggleMenu}>\r\n-        ☰\r\n-      </div>\r\n-      <div className={style.image}></div>\r\n-      <div className={style.search_box}>\r\n-        <input className={style.input} placeholder=\"Enter Favorite Skins\" />\r\n-      </div>\r\n-      <ul className={`${style.caintainer} ${isMenuOpen ? style.showMenu : \"\"}`}>\r\n-        <li className={style.items}>\r\n-          <div className={style.name}>\r\n-            <Link href=\"/\" style={{ textDecoration: \"none\", color: \"white\" }}>\r\n-              <p>Home</p>\r\n-            </Link>\r\n-            <hr className={style.line} />\r\n-          </div>\r\n-        </li>\r\n-        <li className={style.items}>\r\n-          <div className={style.name}>\r\n-            <Link href=\"/Tree\" style={{ textDecoration: \"none\", color: \"white\" }}>\r\n-              <p>Alluser</p>\r\n-            </Link>\r\n-            <hr className={style.line} />\r\n-          </div>\r\n-        </li>\r\n-        <li className={style.items}>\r\n-          <div className={style.name}>\r\n-            <p>Skins</p>\r\n-            <hr className={style.line} />\r\n-          </div>\r\n-        </li>\r\n-        <li className={style.items}>\r\n-          <div className={style.name}>\r\n-            <Link href=\"/contact\" style={{ textDecoration: \"none\", color: \"white\" }}>\r\n-              <p>Contact</p>\r\n-            </Link>\r\n-            <hr className={style.line} />\r\n-          </div>\r\n-        </li>\r\n-        <li className={style.items}>\r\n-          <div className={style.name}>\r\n-            {!isAuthenticated ? (\r\n-              <Link href=\"/Login\" style={{ textDecoration: \"none\", color: \"white\" }}>\r\n-                <p>Login</p>\r\n-              </Link>\r\n-            ) : (\r\n-              <button className={style.links} onClick={handleLogout}>\r\n-                Logout\r\n-              </button>\r\n-            )}\r\n-            <hr className={style.line} />\r\n-          </div>\r\n-        </li>\r\n-      </ul>\r\n-    </>\r\n-  );\r\n-};\r\n-\r\n-export default Navbar;\r\n import React, { useState, useEffect } from \"react\";\r\n import axios from \"axios\";\r\n import styles from \"./index.module.scss\";\r\n import { useRouter } from \"next/router\";\r\n"
                },
                {
                    "date": 1723208470195,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,9 +1,8 @@\n import React, { useState, useEffect } from \"react\";\r\n import axios from \"axios\";\r\n import styles from \"./index.module.scss\";\r\n import { useRouter } from \"next/router\";\r\n-import Navbar from \"@/Components/Navbar\";\r\n \r\n const Index = () => {\r\n   const [email, setEmail] = useState<string>(\"\");\r\n   const [password, setPassword] = useState<string>(\"\");\r\n@@ -15,18 +14,8 @@\n     const token = localStorage.getItem(\"accessToken\");\r\n     if (token) {\r\n       router.push(\"/home\");\r\n     }\r\n-\r\n-    const handlePopState = () => {\r\n-      router.push(\"/home\");\r\n-    };\r\n-\r\n-    window.addEventListener(\"popstate\", handlePopState);\r\n-\r\n-    return () => {\r\n-      window.removeEventListener(\"popstate\", handlePopState);\r\n-    };\r\n   }, [router]);\r\n \r\n   const handleLogin = async (event: React.FormEvent) => {\r\n     event.preventDefault();\r\n@@ -77,61 +66,53 @@\n     }\r\n   };\r\n \r\n   return (\r\n-    <>\r\n-      <div className={styles.loginContainer}>\r\n-        {loading && (\r\n-          <div className={styles.loadingOverlay}>\r\n-            <div className={styles.spinner}></div>\r\n+    <div className={styles.loginContainer}>\r\n+      {loading && (\r\n+        <div className={styles.loadingOverlay}>\r\n+          <div className={styles.spinner}></div>\r\n+        </div>\r\n+      )}\r\n+      <div className={styles.loginForm}>\r\n+        <h1 className={styles.header}>Login First to View User Details and Message Us</h1>\r\n+        <h2 className={styles.loginTitle}>LOGIN</h2>\r\n+        <form onSubmit={handleLogin}>\r\n+          <div className={styles.inputContainer}>\r\n+            <input\r\n+              type=\"text\"\r\n+              value={email}\r\n+              onChange={(e) => setEmail(e.target.value)}\r\n+              required\r\n+              autoComplete=\"current-username\"\r\n+            />\r\n+            <label>User Id</label>\r\n+            <div className={styles.inputUnderline}></div>\r\n           </div>\r\n-        )}\r\n-        <button\r\n-          className={styles.backButton}\r\n-          onClick={() => router.back()}\r\n-          aria-label=\"Go Back\"\r\n-        >\r\n-        </button>\r\n-        <div className={styles.loginForm}>\r\n-          <h1 className={styles.header}>Login First to View User Details and Message Us</h1>\r\n-          <h2 className={styles.loginTitle}>LOGIN</h2>\r\n-          <form onSubmit={handleLogin}>\r\n-            <div className={styles.inputContainer}>\r\n-              <input\r\n-                type=\"text\"\r\n-                value={email}\r\n-                onChange={(e) => setEmail(e.target.value)}\r\n-                required\r\n-                autoComplete=\"current-username\"\r\n-              />\r\n-              <label>User Id</label>\r\n-              <div className={styles.inputUnderline}></div>\r\n-            </div>\r\n-            <div className={styles.inputContainer}>\r\n-              <input\r\n-                type=\"password\"\r\n-                value={password}\r\n-                onChange={(e) => setPassword(e.target.value)}\r\n-                required\r\n-                autoComplete=\"current-password\"\r\n-              />\r\n-              <label>Password</label>\r\n-              <div className={styles.inputUnderline}></div>\r\n-            </div>\r\n-            {error && <p className={styles.error}>{error}</p>}\r\n-            <div className={styles.button_login}>\r\n-              <button\r\n-                type=\"submit\"\r\n-                className={styles.loginButton}\r\n-                disabled={loading}\r\n-              >\r\n-                {loading ? \"Loading...\" : \"Login\"}\r\n-              </button>\r\n-            </div>\r\n-          </form>\r\n-        </div>\r\n+          <div className={styles.inputContainer}>\r\n+            <input\r\n+              type=\"password\"\r\n+              value={password}\r\n+              onChange={(e) => setPassword(e.target.value)}\r\n+              required\r\n+              autoComplete=\"current-password\"\r\n+            />\r\n+            <label>Password</label>\r\n+            <div className={styles.inputUnderline}></div>\r\n+          </div>\r\n+          {error && <p className={styles.error}>{error}</p>}\r\n+          <div className={styles.button_login}>\r\n+            <button\r\n+              type=\"submit\"\r\n+              className={styles.loginButton}\r\n+              disabled={loading}\r\n+            >\r\n+              {loading ? \"Loading...\" : \"Login\"}\r\n+            </button>\r\n+          </div>\r\n+        </form>\r\n       </div>\r\n-    </>\r\n+    </div>\r\n   );\r\n };\r\n \r\n export default Index;\r\n"
                },
                {
                    "date": 1723208928226,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -15,9 +15,25 @@\n     if (token) {\r\n       router.push(\"/home\");\r\n     }\r\n   }, [router]);\r\n+  useEffect(() => {\r\n+    const token = localStorage.getItem(\"accessToken\");\r\n+    if (token) {\r\n+      router.push(\"/home\");\r\n+    }\r\n \r\n+    const handlePopState = () => {\r\n+      router.push(\"/home\");\r\n+    };\r\n+\r\n+    window.addEventListener(\"popstate\", handlePopState);\r\n+\r\n+    return () => {\r\n+      window.removeEventListener(\"popstate\", handlePopState);\r\n+    };\r\n+  }, [router]);\r\n+\r\n   const handleLogin = async (event: React.FormEvent) => {\r\n     event.preventDefault();\r\n     setLoading(true);\r\n     try {\r\n"
                },
                {
                    "date": 1723209178619,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,27 +1,25 @@\n import React, { useState, useEffect } from \"react\";\r\n import axios from \"axios\";\r\n import styles from \"./index.module.scss\";\r\n import { useRouter } from \"next/router\";\r\n+import Navbar from '@/Components/Navbar'\r\n \r\n const Index = () => {\r\n   const [email, setEmail] = useState<string>(\"\");\r\n   const [password, setPassword] = useState<string>(\"\");\r\n   const [error, setError] = useState<string | null>(null);\r\n   const [loading, setLoading] = useState<boolean>(false);\r\n+  const [isPasswordModalOpen, setIsPasswordModalOpen] = useState<boolean>(false);\r\n+  const [newPassword, setNewPassword] = useState<string>(\"\");\r\n+  const [confirmPassword, setConfirmPassword] = useState<string>(\"\");\r\n   const router = useRouter();\r\n \r\n   useEffect(() => {\r\n     const token = localStorage.getItem(\"accessToken\");\r\n     if (token) {\r\n       router.push(\"/home\");\r\n     }\r\n-  }, [router]);\r\n-  useEffect(() => {\r\n-    const token = localStorage.getItem(\"accessToken\");\r\n-    if (token) {\r\n-      router.push(\"/home\");\r\n-    }\r\n \r\n     const handlePopState = () => {\r\n       router.push(\"/home\");\r\n     };\r\n@@ -35,8 +33,9 @@\n \r\n   const handleLogin = async (event: React.FormEvent) => {\r\n     event.preventDefault();\r\n     setLoading(true);\r\n+    localStorage.setItem(\"id\", email);\r\n     try {\r\n       const loginResponse = await axios.post(\r\n         \"https://www.referback.trollsufficient.com/admin/login\",\r\n         { email, password }\r\n@@ -44,9 +43,9 @@\n       const { token, role } = loginResponse.data;\r\n       localStorage.setItem(\"accessToken\", token);\r\n       localStorage.setItem(\"role\", role);\r\n \r\n-      const userResponse = await axios.post(\r\n+       const userResponse = await axios.post(\r\n         \"https://www.referback.trollsufficient.com/admin/user\",\r\n         { email },\r\n         {\r\n           headers: {\r\n@@ -58,9 +57,9 @@\n \r\n       const userName = userResponse.data.name;\r\n       const userId = userResponse.data.id;\r\n       localStorage.setItem(\"userName\", userName);\r\n-      localStorage.setItem(\"userId\", userId);\r\n+      localStorage.setItem(\"userId\", userId); // Save userId for later use\r\n \r\n       const coinsResponse = await axios.get(\r\n         `https://www.referback.trollsufficient.com/admin/coins/${userId}`,\r\n         {\r\n@@ -71,9 +70,9 @@\n         }\r\n       );\r\n \r\n       const userCoins = coinsResponse.data.coins;\r\n-      localStorage.setItem(\"userCoins\", userCoins.toString());\r\n+      localStorage.setItem(\"userCoins\", userCoins);\r\n       router.push(\"/home\");\r\n     } catch (error) {\r\n       console.error(\"Login error:\", error);\r\n       setError(\"Invalid credentials\");\r\n@@ -81,15 +80,58 @@\n       setLoading(false);\r\n     }\r\n   };\r\n \r\n+  const handleChangePassword = async () => {\r\n+    if (newPassword !== confirmPassword) {\r\n+      alert(\"Passwords do not match.\");\r\n+      return;\r\n+    }\r\n+\r\n+    try {\r\n+      const token = localStorage.getItem(\"accessToken\");\r\n+      const userId = localStorage.getItem(\"id\");\r\n+      if (token && userId) {\r\n+        await axios.put(\r\n+          `https://www.referback.trollsufficient.com/admin/set-password/${userId}`,\r\n+          { password: newPassword }\r\n+        );\r\n+\r\n+        alert(\"Password changed successfully.\");\r\n+        setNewPassword(\"\");\r\n+        setConfirmPassword(\"\");\r\n+        handleCloseModal();\r\n+      }\r\n+    } catch (error) {\r\n+      console.error(\"Error changing password:\", error);\r\n+      alert(\"There was an error changing the password. Please try again.\");\r\n+    }\r\n+  };\r\n+\r\n+  const handleCloseModal = () => {\r\n+    setIsPasswordModalOpen(false);\r\n+  };\r\n+\r\n+  const handleOpenModal = () => {\r\n+    // setIsPasswordModalOpen(true);\r\n+    console.log(\"click here\");\r\n+  };\r\n+\r\n   return (\r\n+    <> <Navbar />\r\n     <div className={styles.loginContainer}>\r\n+     \r\n       {loading && (\r\n         <div className={styles.loadingOverlay}>\r\n           <div className={styles.spinner}></div>\r\n         </div>\r\n       )}\r\n+      <button \r\n+        className={styles.backButton} \r\n+        onClick={() => router.back()} \r\n+        aria-label=\"Go Back\"\r\n+      >\r\n+      </button>\r\n       <div className={styles.loginForm}>\r\n         <h1 className={styles.header}>Login First to View User Details and Message Us</h1>\r\n         <h2 className={styles.loginTitle}>LOGIN</h2>\r\n         <form onSubmit={handleLogin}>\r\n@@ -115,9 +157,9 @@\n             <label>Password</label>\r\n             <div className={styles.inputUnderline}></div>\r\n           </div>\r\n           {error && <p className={styles.error}>{error}</p>}\r\n-          <div className={styles.button_login}>\r\n+          <div className={styles.button_login}> \r\n             <button\r\n               type=\"submit\"\r\n               className={styles.loginButton}\r\n               disabled={loading}\r\n@@ -125,10 +167,49 @@\n               {loading ? \"Loading...\" : \"Login\"}\r\n             </button>\r\n           </div>\r\n         </form>\r\n+        {/* <button\r\n+          className={styles.forgotPasswordButton}\r\n+          onClick={handleOpenModal}\r\n+        >\r\n+          Forgot Password\r\n+        </button> */}\r\n       </div>\r\n+\r\n+      {/* {isPasswordModalOpen && (\r\n+        <div className={styles.modalBackdrop} onClick={handleCloseModal}>\r\n+          <div\r\n+            className={styles.modalContent}\r\n+            onClick={(e) => e.stopPropagation()}\r\n+          >\r\n+            <h3>Change Password</h3>\r\n+            <div className={styles.modalColumn}>\r\n+              <label>New Password:</label>\r\n+              <input\r\n+                type=\"password\"\r\n+                value={newPassword}\r\n+                onChange={(e) => setNewPassword(e.target.value)}\r\n+                placeholder=\"Enter new password\"\r\n+              />\r\n+            </div>\r\n+            <div className={styles.modalColumn}>\r\n+              <label>Confirm Password:</label>\r\n+              <input\r\n+                type=\"password\"\r\n+                value={confirmPassword}\r\n+                onChange={(e) => setConfirmPassword(e.target.value)}\r\n+                placeholder=\"Confirm new password\"\r\n+              />\r\n+            </div>\r\n+            <button onClick={handleChangePassword}>\r\n+              Set Password\r\n+            </button>\r\n+          </div>\r\n+        </div>\r\n+      )} */}\r\n     </div>\r\n+    </>\r\n   );\r\n };\r\n \r\n export default Index;\r\n"
                },
                {
                    "date": 1723209329483,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,25 +1,27 @@\n import React, { useState, useEffect } from \"react\";\r\n import axios from \"axios\";\r\n import styles from \"./index.module.scss\";\r\n import { useRouter } from \"next/router\";\r\n-import Navbar from '@/Components/Navbar'\r\n \r\n const Index = () => {\r\n   const [email, setEmail] = useState<string>(\"\");\r\n   const [password, setPassword] = useState<string>(\"\");\r\n   const [error, setError] = useState<string | null>(null);\r\n   const [loading, setLoading] = useState<boolean>(false);\r\n-  const [isPasswordModalOpen, setIsPasswordModalOpen] = useState<boolean>(false);\r\n-  const [newPassword, setNewPassword] = useState<string>(\"\");\r\n-  const [confirmPassword, setConfirmPassword] = useState<string>(\"\");\r\n   const router = useRouter();\r\n \r\n   useEffect(() => {\r\n     const token = localStorage.getItem(\"accessToken\");\r\n     if (token) {\r\n       router.push(\"/home\");\r\n     }\r\n+  }, [router]);\r\n+  useEffect(() => {\r\n+    const token = localStorage.getItem(\"accessToken\");\r\n+    if (token) {\r\n+      router.push(\"/home\");\r\n+    }\r\n \r\n     const handlePopState = () => {\r\n       router.push(\"/home\");\r\n     };\r\n@@ -33,9 +35,8 @@\n \r\n   const handleLogin = async (event: React.FormEvent) => {\r\n     event.preventDefault();\r\n     setLoading(true);\r\n-    localStorage.setItem(\"id\", email);\r\n     try {\r\n       const loginResponse = await axios.post(\r\n         \"https://www.referback.trollsufficient.com/admin/login\",\r\n         { email, password }\r\n@@ -43,9 +44,9 @@\n       const { token, role } = loginResponse.data;\r\n       localStorage.setItem(\"accessToken\", token);\r\n       localStorage.setItem(\"role\", role);\r\n \r\n-       const userResponse = await axios.post(\r\n+      const userResponse = await axios.post(\r\n         \"https://www.referback.trollsufficient.com/admin/user\",\r\n         { email },\r\n         {\r\n           headers: {\r\n@@ -57,9 +58,9 @@\n \r\n       const userName = userResponse.data.name;\r\n       const userId = userResponse.data.id;\r\n       localStorage.setItem(\"userName\", userName);\r\n-      localStorage.setItem(\"userId\", userId); // Save userId for later use\r\n+      localStorage.setItem(\"userId\", userId);\r\n \r\n       const coinsResponse = await axios.get(\r\n         `https://www.referback.trollsufficient.com/admin/coins/${userId}`,\r\n         {\r\n@@ -70,9 +71,9 @@\n         }\r\n       );\r\n \r\n       const userCoins = coinsResponse.data.coins;\r\n-      localStorage.setItem(\"userCoins\", userCoins);\r\n+      localStorage.setItem(\"userCoins\", userCoins.toString());\r\n       router.push(\"/home\");\r\n     } catch (error) {\r\n       console.error(\"Login error:\", error);\r\n       setError(\"Invalid credentials\");\r\n@@ -80,58 +81,15 @@\n       setLoading(false);\r\n     }\r\n   };\r\n \r\n-  const handleChangePassword = async () => {\r\n-    if (newPassword !== confirmPassword) {\r\n-      alert(\"Passwords do not match.\");\r\n-      return;\r\n-    }\r\n-\r\n-    try {\r\n-      const token = localStorage.getItem(\"accessToken\");\r\n-      const userId = localStorage.getItem(\"id\");\r\n-      if (token && userId) {\r\n-        await axios.put(\r\n-          `https://www.referback.trollsufficient.com/admin/set-password/${userId}`,\r\n-          { password: newPassword }\r\n-        );\r\n-\r\n-        alert(\"Password changed successfully.\");\r\n-        setNewPassword(\"\");\r\n-        setConfirmPassword(\"\");\r\n-        handleCloseModal();\r\n-      }\r\n-    } catch (error) {\r\n-      console.error(\"Error changing password:\", error);\r\n-      alert(\"There was an error changing the password. Please try again.\");\r\n-    }\r\n-  };\r\n-\r\n-  const handleCloseModal = () => {\r\n-    setIsPasswordModalOpen(false);\r\n-  };\r\n-\r\n-  const handleOpenModal = () => {\r\n-    // setIsPasswordModalOpen(true);\r\n-    console.log(\"click here\");\r\n-  };\r\n-\r\n   return (\r\n-    <> <Navbar />\r\n     <div className={styles.loginContainer}>\r\n-     \r\n       {loading && (\r\n         <div className={styles.loadingOverlay}>\r\n           <div className={styles.spinner}></div>\r\n         </div>\r\n       )}\r\n-      <button \r\n-        className={styles.backButton} \r\n-        onClick={() => router.back()} \r\n-        aria-label=\"Go Back\"\r\n-      >\r\n-      </button>\r\n       <div className={styles.loginForm}>\r\n         <h1 className={styles.header}>Login First to View User Details and Message Us</h1>\r\n         <h2 className={styles.loginTitle}>LOGIN</h2>\r\n         <form onSubmit={handleLogin}>\r\n@@ -157,9 +115,9 @@\n             <label>Password</label>\r\n             <div className={styles.inputUnderline}></div>\r\n           </div>\r\n           {error && <p className={styles.error}>{error}</p>}\r\n-          <div className={styles.button_login}> \r\n+          <div className={styles.button_login}>\r\n             <button\r\n               type=\"submit\"\r\n               className={styles.loginButton}\r\n               disabled={loading}\r\n@@ -167,49 +125,10 @@\n               {loading ? \"Loading...\" : \"Login\"}\r\n             </button>\r\n           </div>\r\n         </form>\r\n-        {/* <button\r\n-          className={styles.forgotPasswordButton}\r\n-          onClick={handleOpenModal}\r\n-        >\r\n-          Forgot Password\r\n-        </button> */}\r\n       </div>\r\n-\r\n-      {/* {isPasswordModalOpen && (\r\n-        <div className={styles.modalBackdrop} onClick={handleCloseModal}>\r\n-          <div\r\n-            className={styles.modalContent}\r\n-            onClick={(e) => e.stopPropagation()}\r\n-          >\r\n-            <h3>Change Password</h3>\r\n-            <div className={styles.modalColumn}>\r\n-              <label>New Password:</label>\r\n-              <input\r\n-                type=\"password\"\r\n-                value={newPassword}\r\n-                onChange={(e) => setNewPassword(e.target.value)}\r\n-                placeholder=\"Enter new password\"\r\n-              />\r\n-            </div>\r\n-            <div className={styles.modalColumn}>\r\n-              <label>Confirm Password:</label>\r\n-              <input\r\n-                type=\"password\"\r\n-                value={confirmPassword}\r\n-                onChange={(e) => setConfirmPassword(e.target.value)}\r\n-                placeholder=\"Confirm new password\"\r\n-              />\r\n-            </div>\r\n-            <button onClick={handleChangePassword}>\r\n-              Set Password\r\n-            </button>\r\n-          </div>\r\n-        </div>\r\n-      )} */}\r\n     </div>\r\n-    </>\r\n   );\r\n };\r\n \r\n export default Index;\r\n"
                },
                {
                    "date": 1723209516799,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -72,8 +72,9 @@\n       );\r\n \r\n       const userCoins = coinsResponse.data.coins;\r\n       localStorage.setItem(\"userCoins\", userCoins.toString());\r\n+      window.location.reload()\r\n       router.push(\"/home\");\r\n     } catch (error) {\r\n       console.error(\"Login error:\", error);\r\n       setError(\"Invalid credentials\");\r\n"
                }
            ],
            "date": 1723184239140,
            "name": "Commit-0",
            "content": "import React, { useState, useEffect } from \"react\";\r\nimport axios from \"axios\";\r\nimport styles from \"./index.module.scss\";\r\nimport { useRouter } from \"next/router\";\r\nimport Navbar from '@/Components/Navbar'\r\n\r\nconst Index = () => {\r\n  const [email, setEmail] = useState<string>(\"\");\r\n  const [password, setPassword] = useState<string>(\"\");\r\n  const [error, setError] = useState<string | null>(null);\r\n  const [loading, setLoading] = useState<boolean>(false);\r\n  const [isPasswordModalOpen, setIsPasswordModalOpen] = useState<boolean>(false);\r\n  const [newPassword, setNewPassword] = useState<string>(\"\");\r\n  const [confirmPassword, setConfirmPassword] = useState<string>(\"\");\r\n  const router = useRouter();\r\n\r\n  useEffect(() => {\r\n    const token = localStorage.getItem(\"accessToken\");\r\n    if (token) {\r\n      router.push(\"/home\");\r\n    }\r\n\r\n    const handlePopState = () => {\r\n      router.push(\"/home\");\r\n    };\r\n\r\n    window.addEventListener(\"popstate\", handlePopState);\r\n\r\n    return () => {\r\n      window.removeEventListener(\"popstate\", handlePopState);\r\n    };\r\n  }, [router]);\r\n\r\n  const handleLogin = async (event: React.FormEvent) => {\r\n    event.preventDefault();\r\n    setLoading(true);\r\n    localStorage.setItem(\"id\", email);\r\n    try {\r\n      const loginResponse = await axios.post(\r\n        \"https://www.referback.trollsufficient.com/admin/login\",\r\n        { email, password }\r\n      );\r\n      const { token, role } = loginResponse.data;\r\n      localStorage.setItem(\"accessToken\", token);\r\n      localStorage.setItem(\"role\", role);\r\n\r\n       const userResponse = await axios.post(\r\n        \"https://www.referback.trollsufficient.com/admin/user\",\r\n        { email },\r\n        {\r\n          headers: {\r\n            Authorization: `Bearer ${token}`,\r\n            \"Content-Type\": \"application/json\",\r\n          },\r\n        }\r\n      );\r\n\r\n      const userName = userResponse.data.name;\r\n      const userId = userResponse.data.id;\r\n      localStorage.setItem(\"userName\", userName);\r\n      localStorage.setItem(\"userId\", userId); // Save userId for later use\r\n\r\n      const coinsResponse = await axios.get(\r\n        `https://www.referback.trollsufficient.com/admin/coins/${userId}`,\r\n        {\r\n          headers: {\r\n            Authorization: `Bearer ${token}`,\r\n            \"Content-Type\": \"application/json\",\r\n          },\r\n        }\r\n      );\r\n\r\n      const userCoins = coinsResponse.data.coins;\r\n      localStorage.setItem(\"userCoins\", userCoins);\r\n      router.push(\"/home\");\r\n    } catch (error) {\r\n      console.error(\"Login error:\", error);\r\n      setError(\"Invalid credentials\");\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const handleChangePassword = async () => {\r\n    if (newPassword !== confirmPassword) {\r\n      alert(\"Passwords do not match.\");\r\n      return;\r\n    }\r\n\r\n    try {\r\n      const token = localStorage.getItem(\"accessToken\");\r\n      const userId = localStorage.getItem(\"id\");\r\n      if (token && userId) {\r\n        await axios.put(\r\n          `https://www.referback.trollsufficient.com/admin/set-password/${userId}`,\r\n          { password: newPassword }\r\n        );\r\n\r\n        alert(\"Password changed successfully.\");\r\n        setNewPassword(\"\");\r\n        setConfirmPassword(\"\");\r\n        handleCloseModal();\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Error changing password:\", error);\r\n      alert(\"There was an error changing the password. Please try again.\");\r\n    }\r\n  };\r\n\r\n  const handleCloseModal = () => {\r\n    setIsPasswordModalOpen(false);\r\n  };\r\n\r\n  const handleOpenModal = () => {\r\n    // setIsPasswordModalOpen(true);\r\n    console.log(\"click here\");\r\n  };\r\n\r\n  return (\r\n    <> <Navbar />\r\n    <div className={styles.loginContainer}>\r\n     \r\n      {loading && (\r\n        <div className={styles.loadingOverlay}>\r\n          <div className={styles.spinner}></div>\r\n        </div>\r\n      )}\r\n      <button \r\n        className={styles.backButton} \r\n        onClick={() => router.back()} \r\n        aria-label=\"Go Back\"\r\n      >\r\n      </button>\r\n      <div className={styles.loginForm}>\r\n        <h1 className={styles.header}>Login First to View User Details and Message Us</h1>\r\n        <h2 className={styles.loginTitle}>LOGIN</h2>\r\n        <form onSubmit={handleLogin}>\r\n          <div className={styles.inputContainer}>\r\n            <input\r\n              type=\"text\"\r\n              value={email}\r\n              onChange={(e) => setEmail(e.target.value)}\r\n              required\r\n              autoComplete=\"current-username\"\r\n            />\r\n            <label>User Id</label>\r\n            <div className={styles.inputUnderline}></div>\r\n          </div>\r\n          <div className={styles.inputContainer}>\r\n            <input\r\n              type=\"password\"\r\n              value={password}\r\n              onChange={(e) => setPassword(e.target.value)}\r\n              required\r\n              autoComplete=\"current-password\"\r\n            />\r\n            <label>Password</label>\r\n            <div className={styles.inputUnderline}></div>\r\n          </div>\r\n          {error && <p className={styles.error}>{error}</p>}\r\n          <div className={styles.button_login}> \r\n            <button\r\n              type=\"submit\"\r\n              className={styles.loginButton}\r\n              disabled={loading}\r\n            >\r\n              {loading ? \"Loading...\" : \"Login\"}\r\n            </button>\r\n          </div>\r\n        </form>\r\n        {/* <button\r\n          className={styles.forgotPasswordButton}\r\n          onClick={handleOpenModal}\r\n        >\r\n          Forgot Password\r\n        </button> */}\r\n      </div>\r\n\r\n      {/* {isPasswordModalOpen && (\r\n        <div className={styles.modalBackdrop} onClick={handleCloseModal}>\r\n          <div\r\n            className={styles.modalContent}\r\n            onClick={(e) => e.stopPropagation()}\r\n          >\r\n            <h3>Change Password</h3>\r\n            <div className={styles.modalColumn}>\r\n              <label>New Password:</label>\r\n              <input\r\n                type=\"password\"\r\n                value={newPassword}\r\n                onChange={(e) => setNewPassword(e.target.value)}\r\n                placeholder=\"Enter new password\"\r\n              />\r\n            </div>\r\n            <div className={styles.modalColumn}>\r\n              <label>Confirm Password:</label>\r\n              <input\r\n                type=\"password\"\r\n                value={confirmPassword}\r\n                onChange={(e) => setConfirmPassword(e.target.value)}\r\n                placeholder=\"Confirm new password\"\r\n              />\r\n            </div>\r\n            <button onClick={handleChangePassword}>\r\n              Set Password\r\n            </button>\r\n          </div>\r\n        </div>\r\n      )} */}\r\n    </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Index;\r\n"
        }
    ]
}